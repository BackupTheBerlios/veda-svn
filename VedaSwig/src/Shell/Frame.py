# -*- coding: ISO-8859-1 -*-
# generated by wxGlade 0.4.1 on Sun Apr 09 21:23:04 2006

import wx
import sys

from Tools import *
from xml.dom.minidom import *

# begin wxGlade: dependencies
# end wxGlade

class Frame(wx.Frame):
    kChanged = 0
    
    
    currentDir = "."
    iconDir = "../icons/"
    
    configFileName = "./config.xml"
    projectFileName = "default.xml"
    
    def __init__(self, *args, **kwds):
        # begin wxGlade: Frame.__init__
        kwds["style"] = wx.DEFAULT_FRAME_STYLE
        wx.Frame.__init__(self, *args, **kwds)
        self.split_window = wx.SplitterWindow(self, -1, style=wx.SP_3D|wx.SP_BORDER)
        
        # Menu Bar
        self.frame_menubar = wx.MenuBar()
        self.SetMenuBar(self.frame_menubar)
        wxglade_tmp_menu = wx.Menu()
        wxglade_tmp_menu.Append(101, "New\tCtrl-N", "", wx.ITEM_NORMAL)
        wxglade_tmp_menu.AppendSeparator()
        wxglade_tmp_menu.Append(102, "Open\tCtrl-O", "", wx.ITEM_NORMAL)
        wxglade_tmp_menu.Append(103, "Save\tCtrl-S", "", wx.ITEM_NORMAL)
        wxglade_tmp_menu.Append(104, "Save as..", "", wx.ITEM_NORMAL)
        wxglade_tmp_menu.Append(105, "Publish", "", wx.ITEM_NORMAL)
        wxglade_tmp_menu.AppendSeparator()
        wxglade_tmp_menu.Append(106, "Exit\tAlt-X", "", wx.ITEM_NORMAL)
        self.frame_menubar.Append(wxglade_tmp_menu, "File")
        wxglade_tmp_menu = wx.Menu()
        wxglade_tmp_menu.Append(201, "Undo\tCtrl-Z", "", wx.ITEM_NORMAL)
        wxglade_tmp_menu.Append(202, "Redo\tCtrl-U", "", wx.ITEM_NORMAL)
        wxglade_tmp_menu.AppendSeparator()
        wxglade_tmp_menu.Append(203, "Cut\tCtrl-X", "", wx.ITEM_NORMAL)
        wxglade_tmp_menu.Append(204, "Copy\tCtrl-C", "", wx.ITEM_NORMAL)
        wxglade_tmp_menu.Append(205, "Paste\tCtrl-V", "", wx.ITEM_NORMAL)
        self.frame_menubar.Append(wxglade_tmp_menu, "Edit")
        wxglade_tmp_menu = wx.Menu()
        wxglade_tmp_menu.Append(301, "Zoom fit", "", wx.ITEM_NORMAL)
        self.frame_menubar.Append(wxglade_tmp_menu, "View")
        wxglade_tmp_menu = wx.Menu()
        wxglade_tmp_menu.Append(401, "Polygon", "", wx.ITEM_NORMAL)
        wxglade_tmp_menu.Append(402, "Circle", "", wx.ITEM_NORMAL)
        self.frame_menubar.Append(wxglade_tmp_menu, "Tools")
        wxglade_tmp_menu = wx.Menu()
        wxglade_tmp_menu.Append(501, "Area..", "", wx.ITEM_NORMAL)
        wxglade_tmp_menu.Append(502, "Parameters..", "", wx.ITEM_NORMAL)
        wxglade_tmp_menu.Append(503, "Options", "", wx.ITEM_NORMAL)
        self.frame_menubar.Append(wxglade_tmp_menu, "Space")                
        wxglade_tmp_menu = wx.Menu()
        wxglade_tmp_menu.Append(801, "About\tAlt-H", "", wx.ITEM_NORMAL)
        self.frame_menubar.Append(wxglade_tmp_menu, "Help")
        # Menu Bar end
        self.frame_statusbar = self.CreateStatusBar(1, 0)
        
        # Tool Bar
        self.frame_toolbar = wx.ToolBar(self, -1, style=wx.TB_HORIZONTAL|wx.TB_TEXT|wx.TB_NOICONS|wx.TB_FLAT)
        self.SetToolBar(self.frame_toolbar)
        self.frame_toolbar.AddLabelTool(801, "Selection", wx.NullBitmap, wx.NullBitmap, wx.ITEM_NORMAL, "Selection Tool", "")
        self.frame_toolbar.AddLabelTool(802, "Polygon", wx.NullBitmap, wx.NullBitmap, wx.ITEM_NORMAL, "Draw Polygon", "")
        self.frame_toolbar.AddLabelTool(803, "Material", wx.NullBitmap, wx.NullBitmap, wx.ITEM_NORMAL, "Fill with material", "SPH material")
        self.frame_toolbar.AddSeparator()
        self.frame_toolbar.AddLabelTool(804, "Transform", wx.NullBitmap, wx.NullBitmap, wx.ITEM_NORMAL, "Transform selected", "")
        self.frame_toolbar.AddLabelTool(805, "Dynamic", wx.NullBitmap, wx.NullBitmap, wx.ITEM_NORMAL, "Set dynamic properties", "Set rotation and velocity")
        # Tool Bar end
        
        self.panel_left = wx.ScrolledWindow(self.split_window, -1,
                                          style=wx.NO_BORDER)
        self.panel_right = wx.Panel(self.split_window, -1)
        
        self.tree_ctrl = wx.TreeCtrl(self.panel_right, -1, style=wx.TR_HIDE_ROOT|wx.TR_EDIT_LABELS|
                                     wx.TR_HAS_BUTTONS|wx.TR_LINES_AT_ROOT|
                                     wx.TR_DEFAULT_STYLE|wx.SUNKEN_BORDER)
        self.panel_options = wx.Panel(self.panel_right, -1)

        self.__set_properties()
        self.__do_layout()

        self.Bind(wx.EVT_MENU, self.OnFileNew, id=101)
        self.Bind(wx.EVT_MENU, self.OnFileOpen, id=102)
        self.Bind(wx.EVT_MENU, self.OnFileSave, id=103)
        self.Bind(wx.EVT_MENU, self.OnFileSaveAs, id=104)
        self.Bind(wx.EVT_MENU, self.OnFilePublish, id=105)
        self.Bind(wx.EVT_MENU, self.OnExit, id=106)
        self.Bind(wx.EVT_MENU, self.OnEditUndo, id=201)
        self.Bind(wx.EVT_MENU, self.OnEditRedo, id=202)
        self.Bind(wx.EVT_MENU, self.OnEditCut, id=203)
        self.Bind(wx.EVT_MENU, self.OnEditCopy, id=204)
        self.Bind(wx.EVT_MENU, self.OnEditPaste, id=205)
        self.Bind(wx.EVT_MENU, self.OnZoomFit, id=301)
        self.Bind(wx.EVT_MENU, self.OnToolPolygon, id=401)
        self.Bind(wx.EVT_MENU, self.OnToolCircle, id=402)
        self.Bind(wx.EVT_TOOL, self.OnToolSelection, id=801)
        self.Bind(wx.EVT_TOOL, self.OnToolPolygon, id=802)
        self.Bind(wx.EVT_TOOL, self.OnToolMaterial, id=803)
        self.Bind(wx.EVT_TOOL, self.OnToolTransform, id=804)
        self.Bind(wx.EVT_TOOL, self.OnToolDynamic, id=805)
        self.Bind(wx.EVT_TREE_SEL_CHANGED, self.OnTreeChanged, self.tree_ctrl)
        self.Bind(wx.EVT_TREE_END_LABEL_EDIT, self.OnTreeEdited, self.tree_ctrl)
        self.Bind(wx.EVT_SPLITTER_SASH_POS_CHANGED, self.OnSashCanged, self.split_window)
        self.Bind(wx.EVT_SPLITTER_UNSPLIT, self.OnSashUnsplit, self.split_window)
        # end wxGlade
        
        
        # begin Draw settings
        self.panel_left.SetBackgroundColour(wx.WHITE)

        self.panel_left.EnableScrolling(True, True)
        self.panel_left.SetScrollbars(20, 20, 50, 50)

        self.panel_left.Bind(wx.EVT_LEFT_DOWN, self.OnDrawLeft)
        self.panel_left.Bind(wx.EVT_LEFT_DCLICK, self.OnDrawLeftDouble)
        self.panel_left.Bind(wx.EVT_MOTION, self.OnDrawLeft)
        self.panel_left.Bind(wx.EVT_LEFT_UP, self.OnDrawLeft)
        self.panel_left.Bind(wx.EVT_RIGHT_DOWN, self.OnDrawRight)
        
        self.panel_left.Bind(wx.EVT_PAINT, self.OnPaint)
        
        sizer = wx.BoxSizer(wx.HORIZONTAL)
        sizer.Add(self.panel_left, 0, wx.EXPAND)
        # end
        
        # begin load my
        
        self.imageDic = {"main": 0, "name": 1, "int": 2, "float": 3,
                         "solid": 4, "material": 5}
        
        self.imageList = wx.ImageList(16, 16)
        
        
        self.imageList.Add(wx.Bitmap(self.iconDir + "main.gif", wx.BITMAP_TYPE_GIF))
        self.imageList.Add(wx.Bitmap(self.iconDir + "name.gif", wx.BITMAP_TYPE_GIF))
        self.imageList.Add(wx.Bitmap(self.iconDir + "int.gif", wx.BITMAP_TYPE_GIF))
        self.imageList.Add(wx.Bitmap(self.iconDir + "float.gif", wx.BITMAP_TYPE_GIF))
        self.imageList.Add(wx.Bitmap(self.iconDir + "solid.gif", wx.BITMAP_TYPE_GIF))
        self.imageList.Add(wx.Bitmap(self.iconDir + "material.gif", wx.BITMAP_TYPE_GIF))
        
        self.tree_ctrl.SetImageList(self.imageList)
        
     # begin Field settings
        self.project = Project()
        
        self.currentTool = Tool(self.project)
        #end                  
        
        try:
            self._loadConfig()
        except Exception:
            import sys
            wx.MessageBox("Cannot load config file." + str(sys.exc_info()[1]), "Error", wx.OK)
            
        # end load               

    def __set_properties(self):
        # begin wxGlade: Frame.__set_properties
        self.SetTitle("VedaEditor")
        self.SetSize(wx.DLG_SZE(self, (390, 320)))
        self.frame_statusbar.SetStatusWidths([-1])
        # statusbar fields
        frame_statusbar_fields = ["(no file)"]
        for i in range(len(frame_statusbar_fields)):
            self.frame_statusbar.SetStatusText(frame_statusbar_fields[i], i)
        self.frame_toolbar.Realize()
        self.panel_left.SetMinSize(wx.DLG_SZE(self.panel_left, (277, 257)))
        self.panel_right.SetMinSize(wx.DLG_SZE(self.panel_right, (100, 257)))
        # end wxGlade

    def __do_layout(self):
        # begin wxGlade: Frame.__do_layout
        sizer_1 = wx.BoxSizer(wx.VERTICAL)
        sizer_2 = wx.BoxSizer(wx.VERTICAL)
        sizer_2.Add(self.tree_ctrl, 1, wx.EXPAND, 0)
        sizer_2.Add(self.panel_options, 1, wx.EXPAND, 0)
        self.panel_right.SetAutoLayout(True)
        self.panel_right.SetSizer(sizer_2)
        self.split_window.SplitVertically(self.panel_left, self.panel_right)
        sizer_1.Add(self.split_window, 1, wx.EXPAND, 0)
        self.SetAutoLayout(True)
        self.SetSizer(sizer_1)
        self.Layout()
        # end wxGlade
        
    def _loadConfig(self):
        def getFirst(node, name):
            return node.getElementsByTagName(name)[0]
            
        def getText(node):
            txt = ""
            for child in node.childNodes:
                if(child.nodeType == child.TEXT_NODE):
                    txt += child.nodeValue
            return txt
        
        doc = parse(self.configFileName)
        
        root = getFirst(doc, "root")
        
        program = getFirst(root, "program")
        
        self.currentDir = getText(getFirst(root, "dir"))
        
        tools = getFirst(root, "tools")
        for node in tools.getElementsByTagName("tool"):
            pass
        
        
        style_node = getFirst(root, "style")
        self.project.styleNormal = Style(style_node.getAttribute("normal"))
        self.project.styleSelected = Style(style_node.getAttribute("selected"))
            
    def _saveConfig(self):
        doc = Document()
        
        root = doc.createElement("root")
        doc.appendChild(root)
        
        info = doc.createComment("Automaticaly generated, edit on you risk ^^")
        root.appendChild(info)
        
        program = doc.createElement("program")
        root.appendChild(program)
        
        dir = doc.createElement("dir")
        text = doc.createTextNode(self.currentDir)
        dir.appendChild(text)
        program.appendChild(dir)
        
        tools = doc.createElement("tools")
        root.appendChild(tools)
        
        style_node = doc.createElement("style")
        style_node.setAttribute("normal", self.project.styleNormal.getName())
        style_node.setAttribute("selected", self.project.styleSelected.getName())
        root.appendChild(style_node)
        
        file = open(self.configFileName, "w")
        doc.writexml(file)
        file.close()
        
    def _treeFill(self):
        root = self.tree_ctrl.AddRoot("Project")

        # globals
        
        self.tree_ctrl.AppendItem(root, self.project.name, self.imageDic["name"] ,data=wx.TreeItemData(self.project))
        
        for obj in self.project.solids:
            self.tree_ctrl.AppendItem(root, obj.name, self.imageDic["solid"], data=wx.TreeItemData(obj))
            
        for obj in self.project.materials:
            self.tree_ctrl.AppendItem(root, obj.name, self.imageDic["material"], data=wx.TreeItemData(obj))
    
    def _treeAdd(self):
        pass
    
    def _treeClear(self):
        self.tree_ctrl.DeleteAllItems()
        
    def _drawClear(self):
        dc = wx.ClientDC(self.panel_left)
        self.panel_left.PrepareDC(dc)
        dc.BeginDrawing()
        dc.Clear()
        dc.EndDrawing()
        
    def _drawDC(self):
        dc = wx.ClientDC(self.panel_left)
        self.panel_left.PrepareDC(dc)
        return dc
        
    def OnFileNew(self, event): # wxGlade: Frame.<event_handler>
        self._drawClear()
        self._treeClear()
        
        self.project.clear()
        
        self._treeFill()

    def OnFileOpen(self, event): # wxGlade: Frame.<event_handler>
        self.projectFileName = wx.FileSelector("Open file..", wildcard="Veda project (*.xml)|*.xml", 
                                               default_path=self.currentDir)
        
        if(len(self.projectFileName) > 0):
            self._drawClear()
            
            try:
                self._treeClear()
                self._drawClear()
                self.project.clear()
                self.project.loadXML(self.projectFileName)
                self.project.draw(self._drawDC())
                self._treeFill()
            except:
                wx.MessageBox("Wrong file format.\n%s" % str(sys.exc_info()[1]), "Error", wx.OK)
        
    def OnFileSave(self, event): # wxGlade: Frame.<event_handler>
        self.project.saveXML(self.projectFileName)
        self.kChanged = False

    def OnFileSaveAs(self, event): # wxGlade: Frame.<event_handler>
        self.projectFileName = wx.FileSelector("Save as..", wildcard="Veda project (*.xml)|*.xml", 
                                               default_path=self.currentDir)
        if(len(self.projectFileName) > 0):
            self.project.saveXML(self.projectFileName)

    def OnFilePublish(self, event): # wxGlade: Frame.<event_handler>
        print "Event handler `OnFilePublish' not implemented!"
        event.Skip()

    def OnExit(self, event): # wxGlade: Frame.<event_handler>
        self._saveConfig()
        if(self.kChanged == False or wx.MessageBox("Exit without saving?", "Confirm", wx.YES_NO) == wx.YES):
            self.Close()

    def OnEditUndo(self, event): # wxGlade: Frame.<event_handler>
        print "Event handler `OnEditUndo' not implemented!"
        event.Skip()

    def OnEditRedo(self, event): # wxGlade: Frame.<event_handler>
        print "Event handler `OnEditRedo' not implemented!"
        event.Skip()

    def OnEditCut(self, event): # wxGlade: Frame.<event_handler>
        print "Event handler `OnEditCut' not implemented!"
        event.Skip()

    def OnEditCopy(self, event): # wxGlade: Frame.<event_handler>
        print "Event handler `OnEditCopy' not implemented!"
        event.Skip()

    def OnEditPaste(self, event): # wxGlade: Frame.<event_handler>
        print "Event handler `OnEditPaste' not implemented!"
        event.Skip()

    def OnZoomFit(self, event): # wxGlade: Frame.<event_handler>
        print "Event handler `OnZoomFit' not implemented!"
        event.Skip()

    def OnToolPolygon(self, event): # wxGlade: Frame.<event_handler>
        print "Event handler `OnToolPolygon' not implemented!"
        event.Skip()

    def OnToolCircle(self, event): # wxGlade: Frame.<event_handler>
        print "Event handler `OnToolCircle' not implemented!"
        event.Skip()

    def OnToolSelection(self, event): # wxGlade: Frame.<event_handler>
        print "Event handler `OnToolSelection' not implemented!"
        event.Skip()

    def OnToolMaterial(self, event): # wxGlade: Frame.<event_handler>
        self.project.fill()
        dc = self._drawDC()
        self.project.draw(dc)
        self.project.drawParticles(dc)                

    def OnToolTransform(self, event): # wxGlade: Frame.<event_handler>
        self.project.clearParticles()
        dc = self._drawDC()
        self.project.draw(dc)
        self.project.drawParticles(dc)                

    def OnToolDynamic(self, event): # wxGlade: Frame.<event_handler>
        dc = self._drawDC()
        self.project.draw(dc)
        self.project.drawParticles(dc)

    def OnTreeChanged(self, event): # wxGlade: Frame.<event_handler>
        print "Tree changed"
        pass
        
    def OnTreeEdited(self, event):
        item = event.GetItem()
        obj = self.tree_ctrl.GetItemData(item).GetData()
        
        newText = event.GetLabel()
        
        if(len(newText) > 0):
            obj.name = event.GetLabel()
        else:
            event.Veto()
        
    def OnSashCanged(self, event): # wxGlade: Frame.<event_handler>
        print "Event handler `OnSashCanged' not implemented!"
        event.Skip()

    def OnSashUnsplit(self, event): # wxGlade: Frame.<event_handler>
        print "Event handler `OnSashUnsplit' not implemented!"
        event.Skip()
        
    # private functions
    
    def _getEventCoordinates(self, event):
        """ The coordinates have to be adjusted to allow for the current scroll
            position.
        """                
        originX, originY = self.panel_left.GetViewStart()
        unitX, unitY = self.panel_left.GetScrollPixelsPerUnit()
        return wx.Point(event.GetX() + (originX * unitX),
                       event.GetY() + (originY * unitY))                
        
        
    # draw events
    
    def OnDrawLeft(self, event):
        self.kChanged = True
        
        dc = wx.ClientDC(self.panel_left)
        self.currentTool.setDC(dc)
        self.panel_left.PrepareDC(dc)
        
        if(self.currentTool != None):
            mousePt = self._getEventCoordinates(event)
            if(event.LeftDown()):
                self.currentTool.endPoint(mousePt)
                self.currentTool.beginPoint(mousePt)
                
            if(event.Moving()):
                self.currentTool.mediateDraw(mousePt)
                
    def OnDrawRight(self, event):
#        dc = wx.ClientDC(self.panel_left)
#        self.panel_left.PrepareDC(dc)
#        self.project.draw(dc)
        
        pass

        
    def OnDrawLeftDouble(self, event):
        self.kChanged = True
        
        dc = wx.ClientDC(self.panel_left)
        self.currentTool.setDC(dc)
        self.panel_left.PrepareDC(dc)
        
        if(self.currentTool != None):
            mousePt = self._getEventCoordinates(event)
            try:
                self.currentTool.endDraw(mousePt)
            except:
                wx.MessageBox("Wrong polygon.", "Error")
            
            self._treeClear()
            self._treeFill()
        
    def OnPaint(self, event):
        dc = wx.PaintDC(self.panel_left)
        self.panel_left.PrepareDC(dc)
        self.project.draw(dc)
        self.project.drawParticles(dc)

# end of class Frame


